# -*- coding: utf-8 -*-
"""simplify strokes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19FwkP6K-L0PxxMq1PNF5Q5ySej_iQSyF

# Learn to draw

#### Drawing frontend
https://draw.neurohub.io<br>

#### Flow API
https://flow.neurohub.io<br>

# Import Libraries
"""

import pandas as pd
import torch
import torchvision
from torchvision import transforms
import os
import numpy as np
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import UnivariateSpline
import requests
import json
from json import JSONEncoder

class NumpyArrayEncoder(JSONEncoder):
    def default(self, obj):
        if isinstance(obj, np.ndarray):
            return obj.tolist()
        return JSONEncoder.default(self, obj)

"""# List drawings in the database """

# GET LIST OF DRAWINGS
ids = pd.read_json('https://flow.neurohub.io/list')

ids

"""# Test simplification of 1 drawing"""

# // TEST STROKE SIMPLIFICATION 

id='6960a950-8522-43f8-ac04-45a10a1013f8';

points = pd.read_json('https://flow.neurohub.io/drawings/' + id + '/points');

headers = {
  'Content-Type': 'application/json'
}

s=.1
numPoints = 32;
payload = [];
strokeIds = points["strokeId"].unique();

for strokeId in strokeIds:
  strokePoints = points[points["strokeId"] == strokeId];
  x, y = strokePoints["x"].to_numpy(), strokePoints["y"].to_numpy() 

  if x.size>5:      
    coords = np.linspace(0, x.size, x.size)
    k=np.min([x.size,5])
    splx = UnivariateSpline(coords, x, k=k, s=s)
    sply = UnivariateSpline(coords, y, k=k, s=s)
    xs = np.linspace(0, x.size, numPoints)
    ys = np.linspace(0, y.size, numPoints)
    data = {'strokeId':strokeId,
            'xs':splx(xs),
            'ys':sply(ys)
    }
    payload.append(data);

data = json.dumps(payload, cls=NumpyArrayEncoder)
URL = "https://flow.neurohub.io/drawings/" + id + "/simple"

response = requests.request("PUT", URL, headers=headers, data=data)
response

"""# Simplify all drawings in the database """

# // STROKE SIMPLIFICATION 

headers = {
  'Content-Type': 'application/json'
}

s=.1
numPoints = 32;

for id in ids[0]:  
  if not id.endswith("-s"):
    print(id)
    points = pd.read_json('https://flow.neurohub.io/drawings/' + id + '/points');
    strokeIds = points["strokeId"].unique();

    payload = []
    for strokeId in strokeIds:
      strokePoints = points[points["strokeId"] == strokeId];
      x, y = strokePoints["x"].to_numpy(), strokePoints["y"].to_numpy() 

      if x.size>5:      
        coords = np.linspace(0, x.size, x.size)
        k=np.min([x.size,5])
        splx = UnivariateSpline(coords, x, k=k, s=s)
        sply = UnivariateSpline(coords, y, k=k, s=s)
        xs = np.linspace(0, x.size, numPoints)
        ys = np.linspace(0, y.size, numPoints)
        data = {'strokeId':strokeId,
                'xs':splx(xs),
                'ys':sply(ys)
        }
        payload.append(data);

    data = json.dumps(payload, cls=NumpyArrayEncoder)
    URL = "https://flow.neurohub.io/drawings/" + id +"/simple"
    response = requests.request("PUT", URL, headers=headers, data=data)